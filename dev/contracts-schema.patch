diff --git a/ua-contracts/docs/contracts-implemented.yaml b/ua-contracts/docs/contracts-implemented.yaml
index 0ca6e2a..44c8a92 100644
--- a/ua-contracts/docs/contracts-implemented.yaml
+++ b/ua-contracts/docs/contracts-implemented.yaml
@@ -10,41 +10,6 @@ info:
     be implemented soon).
 
 components:
-  securitySchemes:
-# Security is annotated here primarily for documentation purposes, as a general guide.
-# Access controls are nuanced than any code generator would probably be capable of.
-# When in doubt, use the source.
-    SSOAuth:
-      type: http
-      in: header
-      name: Authorization
-      scheme: Macaroon
-      x-root-macaroon-path: /v1/canonical-sso-macaroon
-      description: |-
-        Authentication scheme based on the use of discharged
-        macaroons. The client starts an authentication by
-        requesting a root macaroon this will have a third-party
-        caveat addressed to canonical SSO. The client needs to
-        discharge this macaroon; either by using the identity-provider's
-        [API](https://canonical-identity-provider.readthedocs.io/en/latest/resources/token.html#macaroon)
-        or by using the OpenID extension. The client then binds the
-        discharge to the root macaroon and uses that as the authentication
-        token.
-    ContextBearerAuth:
-      type: http
-      description: Context (such as machine) authorization token.
-      scheme: bearer
-
-    ContractBearerAuth:
-      type: http
-      description: Contract user access token.
-      scheme: bearer
-    # TODO: add Oauth for USSO
-
-    AdminAuth:
-      type: http
-      description: Admin-authenticated endpoint.
-      scheme: bearer
 
   schemas:
     AccountInfo:
@@ -405,8 +370,6 @@ paths:
   /v1/accounts:
     get:
       description: Find accounts. Admins can search across all accounts. Users can see only those accounts they have access to.
-      security:
-      - SSOAuth: []
       operationId: GetAccounts
       responses:
         '200':
@@ -425,8 +388,6 @@ paths:
   /v1/accounts/{account}/contracts:
     get:
       description: Find contracts that an account is party to.
-      security:
-      - SSOAuth: []
       operationId: GetAccountContracts
       parameters:
       - name: account
@@ -460,8 +421,6 @@ paths:
         
         TODO declare optional name, capability limits
         such as: contract ID, context type (machines), lifetime, etc.
-      security:
-      - SSOAuth: []
       operationId: AddContractToken
       parameters:
       - name: contract
@@ -499,8 +458,6 @@ paths:
         This will eventually be associated with a user,
         but for now it's restricted to just the admin
         user - contracts aren't yet associated with users.
-      security:
-      - AdminAuth: []
       operationId: AddContract
       requestBody:
         content:
@@ -535,8 +492,6 @@ paths:
         Note: Contexts are _where_ resources are used under a contract. Since v1 of this
         service is specifically targeting UA contracts, supported contexts are always
         "machines". v2 of this API will expose this as /contract/{contract}/context        
-      security:
-      - ContractBearerAuth: []
       operationId: AddContractMachine
       requestBody:
         content:
@@ -575,8 +530,6 @@ paths:
         Get affordances and obligations that apply to the resource for the machine token provided.
         Affordances are domain-specific to the service that provides the resource, and determined
         by the contract.
-      security:
-      - ContextBearerAuth: []
       operationId: GetResourceMachineAccess
       parameters:
       - name: resource
diff --git a/ua-contracts/docs/contracts.yaml b/ua-contracts/docs/contracts.yaml
index b9044a8..cfcecef 100644
--- a/ua-contracts/docs/contracts.yaml
+++ b/ua-contracts/docs/contracts.yaml
@@ -10,34 +10,6 @@ info:
     Most of it is unimplemented as yet.
 
 components:
-  # Security is annotated here primarily for documentation purposes, as a general guide.
-  # Access controls are nuanced than any code generator would probably be capable of.
-  # When in doubt, use the source.
-  securitySchemes:
-    SSOAuth:
-      type: http
-      in: header
-      name: Authorization
-      scheme: Macaroon
-      x-root-macaroon-path: /v1/canonical-sso-macaroon
-      description: |-
-        Authentication scheme based on the use of discharged
-        macaroons. The client starts an authentication by
-        requesting a root macaroon this will have a third-party
-        caveat addressed to canonical SSO. The client needs to
-        discharge this macaroon; either by using the identity-provider's
-        [API](https://canonical-identity-provider.readthedocs.io/en/latest/resources/token.html#macaroon)
-        or by using the OpenID extension. The client then binds the
-        discharge to the root macaroon and uses that as the authentication
-        token.
-    ContextBearerAuth:
-      type: http
-      description: Context (such as machine) authorization token.
-      scheme: bearer
-    ContractBearerAuth:
-      type: http
-      description: Contract user access token.
-      scheme: bearer
 
   schemas:
     AccountInfo:
@@ -478,8 +450,6 @@ paths:
   /v1/accounts:
     get:
       description: Find an account. Admins can search across all accounts. Users can see only those accounts they have access to.
-      security:
-      - SSOAuth: []
       operationId: FindAccount
       parameters:
       - name: name
@@ -524,8 +494,6 @@ paths:
     post:
       description: Add an account. Accounts may be added by an admin or an SF mediator agent.
       # In v1, the "SF mediator" agent might be built in to the contract service; just reserving the option to break it out later.
-      security:
-      - SSOAuth: []
       operationId: AddAccount
       requestBody:
         content:
@@ -569,8 +537,6 @@ paths:
   /v1/accounts/{account}:
     get:
       description: Find an account by ID.
-      security:
-      - SSOAuth: []
       operationId: FindAccountID
       parameters:
       - name: account
@@ -594,8 +560,6 @@ paths:
                 $ref: "#/components/schemas/Error"
     put:
       description: Update account information. Admins can update anything. Users must have account administrator access.
-      security:
-      - SSOAuth: []
       operationId: UpdateAccountID
       parameters:
       - name: account
@@ -628,9 +592,6 @@ paths:
   /v1/accounts/{account}/contracts:
     get:
       description: Find contracts that an account is party to.
-      security:
-      - ContractBearerAuth: []
-      - SSOAuth: []
       operationId: FindAccountContract
       parameters:
       - name: account
@@ -657,8 +618,6 @@ paths:
     post:
       description: Record that an account has entered into a contract.
       # account administrator users can enter into contracts
-      security:
-      - SSOAuth: []
       operationId: AddAccountContract
       parameters:
       - name: account
@@ -692,8 +651,6 @@ paths:
   /v1/accounts/{account}/users:
     get:
       description: Find user access on the account.
-      security:
-      - SSOAuth: []
       operationId: FindAccountUserAccess
       parameters:
       - name: account
@@ -719,8 +676,6 @@ paths:
                 $ref: "#/components/schemas/Error"
     post:
       description: Add user access to an account. Users must have account administrator access.
-      security:
-      - SSOAuth: []
       operationId: AddAccountUserAccess
       parameters:
       - name: account
@@ -747,8 +702,6 @@ paths:
   /v1/accounts/{account}/users/{user}:
     get:
       description: Find user access by username.
-      security:
-      - SSOAuth: []
       operationId: FindAccountUserAccessID
       parameters:
       - name: account
@@ -778,8 +731,6 @@ paths:
                 $ref: "#/components/schemas/Error"
     put:
       description: Update user access to the account.
-      security:
-      - SSOAuth: []
       operationId: UpdateAccountUserAccessID
       parameters:
       - name: account
@@ -817,8 +768,6 @@ paths:
       description: |-
         Revoke user access by username. When a user's access is revoked, all
         issued contract tokens that speak for that user are also revoked.
-      security:
-      - SSOAuth: []
       operationId: RevokeAccountUserAccess
       parameters:
       - name: account
@@ -852,8 +801,6 @@ paths:
       description: |-
         Authorize a machine under a contract and return a token
         that allows the machine access.
-      security:
-      - ContractBearerAuth: []
       operationId: AddContractMachine
       requestBody:
         content:
@@ -889,9 +836,6 @@ paths:
   /v1/contracts/{contract}:
     get:
       description: Find a contract by ID.
-      security:
-      - ContractBearerAuth: []
-      - SSOAuth: []
       operationId: FindContractID
       parameters:
       - name: contract
@@ -921,9 +865,6 @@ paths:
       description: |-
         Find machine authorizations for a contract.
         Note: Contexts are _where_ resources are used under a contract.
-      security:
-      - ContractBearerAuth: []
-      - SSOAuth: []
       operationId: FindContractMachines
       parameters:
       - name: contract
@@ -959,9 +900,6 @@ paths:
         requirement.
 
         If any of the above requirements are not met, error response and nothing is changed.
-      security:
-      - ContractBearerAuth: []
-      - SSOAuth: []
       operationId: ReauthorizeContractMachines
       parameters:
       - name: contract
@@ -987,9 +925,6 @@ paths:
       description: |-
         Remove machine(s) from a contract, revoking their authorization tokens. Once revoked,
         the machine(s) will need to be re-authorized with new tokens using a POST.
-      security:
-      - ContractBearerAuth: []
-      - SSOAuth: []
       operationId: RevokeContractMachines
       parameters:
       - name: contract
@@ -1019,8 +954,6 @@ paths:
         
         This creates a contract token that can be used to create machine tokens
         that can be used to access resources.
-      security:
-      - SSOAuth: []
       operationId: AddContractToken
       parameters:
       - name: contract
@@ -1059,8 +992,6 @@ paths:
     get:
       description: Find authentication tokens issued for this user.
       # search by name, capabilities
-      security:
-      - SSOAuth: []
       operationId: FindContractToken
       parameters:
       - name: contract
@@ -1094,8 +1025,6 @@ paths:
   /v1/contracts/{contract}/users/{user}/token/{token}:
     get:
       description: Get status of a contract authentication token.
-      security:
-      - SSOAuth: []
       operationId: FindContractTokenID
       parameters:
       - name: contract
@@ -1132,8 +1061,6 @@ paths:
     put:
       description: Rotate a contract token, exchanging the current secret for a new one.
       # Experimental/Optional/Nice to have. Don't depend on this in v1.
-      security:
-      - SSOAuth: []
       operationId: RotateContractTokenID
       parameters:
       - name: contract
@@ -1177,8 +1104,6 @@ paths:
                 $ref: "#/components/schemas/Error"
     delete:
       description: Revoke a contract token.
-      security:
-      - SSOAuth: []
       operationId: RevokeContractTokenID
       parameters:
       - name: contract
@@ -1219,8 +1144,6 @@ paths:
       description: |-
         Find contract and entitlements by machine ID. Used by machines to check
         the status of their authorization token.
-      security:
-      - ContextBearerAuth: []
       operationId: FindMachineContract
       parameters:
       - name: machine
@@ -1300,8 +1223,6 @@ paths:
         resource-providing services (like Livepatch, ESM, etc.) to check on the status
         of a machine token if they receive such a token. v1 API supported values for
         {resource} are "esm" "fips" "fips-updates" "livepatch" "support"
-      security:
-      - ContextBearerAuth: []
       operationId: CheckResourceMachineAccess
       parameters:
       - name: resource
@@ -1332,8 +1253,6 @@ paths:
         Get affordances and obligations that apply to the resource for the machine token provided.
         Affordances are domain-specific to the service that provides the resource, and determined
         by the contract.
-      security:
-      - ContextBearerAuth: []
       operationId: GetResourceMachineAccess
       parameters:
       - name: resource
@@ -1372,8 +1291,6 @@ paths:
     get:
       description: Find contract templates
       # user access to templates may be restricted; some templates may be private, so we can cut special deals, etc.
-      security:
-      - SSOAuth: []
       operationId: FindTemplate
       parameters:
       - name: name
@@ -1414,8 +1331,6 @@ paths:
       description: Create a contract template
       # v1: only Canonical can do this, if templates aren't hard-coded
       # request would contain a template document object
-      security:
-      - SSOAuth: []
       operationId: AddTemplate
       requestBody:
         content:
@@ -1440,8 +1355,6 @@ paths:
   /v1/templates/{template}:
     get:
       description: Find contract template by ID
-      security:
-      - SSOAuth: []
       operationId: FindTemplateID
       parameters:
       - name: template
@@ -1470,8 +1383,6 @@ paths:
   /v1/user/accounts:
     get:
       description: Find what accounts the authenticated user has access to.
-      security:
-      - SSOAuth: []
       operationId: GetUserAccounts
       responses:
         '200':
@@ -1499,8 +1410,6 @@ paths:
   /v1/user/contracts:
     get:
       description: Find what contracts the authenticated user has access to.
-      security:
-      - SSOAuth: []
       operationId: GetUserContracts
       responses:
         '200':
@@ -1572,8 +1481,6 @@ paths:
   /v1/users/{user}/accounts:
     get:
       description: Find what accounts a user has access to.
-      security:
-      - SSOAuth: []
       operationId: FindUserAccount
       parameters:
       - name: user
@@ -1608,8 +1515,6 @@ paths:
   /v1/users/{user}/contracts:
     get:
       description: Find what contracts have been entered into, by accounts that a user has access to.
-      security:
-      - SSOAuth: []
       operationId: FindUserContract
       parameters:
       - name: user
