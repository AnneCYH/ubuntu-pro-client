#!/usr/bin/env python

"""Use multipass or lxc to setup uaclients running ubuntu-advantage-client"""

import argparse
import glob
import os
import sys

from uaclient import util

PROG='run-uaclient'


def get_parser():
    """Build an arg parser for run-uaclient utility."""
    parser = argparse.ArgumentParser(
        prog=PROG,
        description='Create an lxc or kvm runing uaclient')
    parser.add_argument(
        '--backend', '-b', required=False, default='multipass',
        choices=['multipass', 'lxc'],
        help=('The backend to talk to when creating a vm: multipass or lxc. '
              'Default:"lxc"'))
    parser.add_argument(
        '--series', '-s', required=False, default='bionic',
        help='The Ubuntu series to deploy in the vm. Default: bionic')
    parser.add_argument(
        '--name', '-n',
        help='The name of the vm to create. Default: uaclient-<series>')
    return parser


def create_uaclient_vm(backend, series, name=None):
    """Create a uaclient named uaclient vm if absent.

    @param backend: multipass or lxc
    @param series: Ubuntu series to deploy
    @param name: Name of the vm

    """
    cmd = []
    if not name:
        name = 'uaclient-%s' % series
    debs = glob.glob('../ubuntu-advantage-*.deb')
    if not debs:
        raise RuntimeError(
            'Found no ubuntu-advnatage-debs in ../; Try make deb')
    deb = os.path.basename(debs[0])
    if backend == 'multipass':
        util.subp(['multipass', 'launch', 'daily:%s' % series, '-n', name])
        util.subp(['multipass', 'copy-files', '../%s' % deb,  '%s:.' % name])
        util.subp(['multipass', 'exec', name, '--', 'sudo', 'dpkg', '-i', deb])
        util.subp(['multipass', 'copy-files', 'uaclient-devel.conf',  '%s:.' % name])
        util.subp(['multipass', 'exec', name, '--', 'sudo', 'mv',
                   './uaclient-devel.conf',
                   '/etc/ubuntu-advantage/uaclient.conf'])
        print('Access demo uaclient with:\nmultipass exec %s ua status' % name)
    elif backend == 'lxc':
        util.subp(['lxc', 'launch', 'ubuntu-daily:%s' % series, name])
        util.subp(['lxc', 'file', 'push', '../%s' % deb, '%s/root/' % name])
        util.subp(['lxc', 'exec', name, '--', 'sudo', 'dpkg', '-i',
                   '/root/%s' % deb])
        util.subp(['lxc', 'file', 'push', 'uaclient-devel.conf',
                   '%s/etc/ubuntu-advantage/uaclient.conf' % name])
        print('Access demo uaclient with:\nlxc exec %s ua status' % name)
    else:
        raise ValueError("Invalid backend %s. Not multipass|lxc" % backend)


def main():
    """Tool to collect and tar all cloud-init related logs."""
    parser = get_parser()
    args = parser.parse_args()
    create_uaclient_vm(args.backend, args.series, args.name)

if __name__ == '__main__':
    sys.exit(main())
