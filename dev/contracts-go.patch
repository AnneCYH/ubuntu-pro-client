diff --git a/ua-contracts/internal/v1/api.go b/ua-contracts/internal/v1/api.go
index fe111f7..d01a3b0 100644
--- a/ua-contracts/internal/v1/api.go
+++ b/ua-contracts/internal/v1/api.go
@@ -54,6 +54,14 @@ var reqServer = &httprequest.Server{
 	ErrorMapper: errorMapper,
 }
 
+var resourceTokens = map[string]string{
+     "esm": "%ESM_CRED%",
+     "fips": "%FIPS_CRED%",
+     "fips-updates": "%FIPS_UPDATES_CRED%",
+     "livepatch": "%LIVEPATCH_CRED%",
+}
+
+
 // Handlers returns a set of handlers for the v1 HTTP endpoints.
 func Handlers(p Params) ([]httprequest.Handler, error) {
 	return reqServer.Handlers(func(hp httprequest.Params, arg interface{}) (*handler, context.Context, error) {
@@ -155,8 +163,12 @@ func (h *handler) AddContractMachine(p httprequest.Params, req *params.AddContra
 // token when accessing the resource-specific service.
 func (h *handler) GetResourceMachineAccess(p httprequest.Params, req *params.GetResourceMachineAccessRequest) (*params.GetResourceMachineAccessResponse, error) {
 	ctx := p.Context
+        // https://github.com/CanonicalLtd/ua-contracts/issues/69
+        // need actual resourceTokens for the SSO account holder
+        // This includes real livepatch tokens, and ppa creds
 	// TODO: we could use a resource specific token instead of using the machine token.
-	tok := MachineTokenFromContext(ctx)
+	resourceToken := resourceTokens[req.Resource]
+        tok := MachineTokenFromContext(ctx)
 	if !tok.IsValid() {
 		// This should never happen because the authorization code
 		// should have filled this in for us.
@@ -172,7 +184,7 @@ func (h *handler) GetResourceMachineAccess(p httprequest.Params, req *params.Get
 	}
 	return &params.GetResourceMachineAccessResponse{
 		Entitlement:   ent,
-		ResourceToken: tok.raw,
+		ResourceToken: resourceToken,
 	}, nil
 }

diff --git a/ua-contracts/internal/v1/api_test.go b/ua-contracts/internal/v1/api_test.go
index 8eafb00..72c2439 100644
--- a/ua-contracts/internal/v1/api_test.go
+++ b/ua-contracts/internal/v1/api_test.go
@@ -182,209 +182,6 @@ func TestAddContractMachine(t *testing.T) {
        c.Assert(string(decoded), qt.Equals, "somemachine\n"+cid)
 }
 
-func TestGetResourceMachineAccess(t *testing.T) {
-       c := qt.New(t)
-       defer c.Done()
-
-       srvStore := memstore.New()
-       u := newServer(c, srvStore)
-       ctx := context.Background()
-
-       _, token := getContractToken(ctx, c, u)
-       // Use a client that authorizes with the newly acquired contract token
-       // to acquire a machine token.
-       client, err := contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(token),
-       })
-       c.Assert(err, qt.Equals, nil)
-       resp1, err := client.AddContractMachine(ctx, &params.AddContractMachineRequest{
-               Body: params.AddContractMachineBody{
-                       Architecture: "amd64",
-                       MachineId:    "somemachine",
-                       Os: params.OS{
-                               Distribution: "ubuntu",
-                               Kernel:       "0.01",
-                               Release:      "aRelease",
-                               Series:       "someSeries",
-                               Type:         "osType",
-                       },
-               },
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       // Now we've got the machine token, we can actually
-       // test GetResourceMachineAccess.
-
-       // Use a client that authorizes with the newly acquired machine
-       // token to acquire a resource token.
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(resp1.MachineToken),
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       resp2, err := client.GetResourceMachineAccess(ctx, &params.GetResourceMachineAccessRequest{
-               Resource: "esm",
-               Machine:  "somemachine",
-       })
-       c.Assert(err, qt.Equals, nil)
-       c.Assert(resp2, qt.DeepEquals, &params.GetResourceMachineAccessResponse{
-               ResourceToken: resp1.MachineToken,
-               Entitlement: params.EntitlementAptRepository{
-                       Type:     "esm",
-                       Entitled: true,
-                       Affordances: params.AffordancesAptRepository{
-                               Series: []string{"precise", "trusty"},
-                       },
-                       Obligations: params.Obligations{
-                               EnableByDefault: true,
-                       },
-                       Directives: params.DirectivesAptRepository{
-                               AptKey: "67C7A026",
-                               AptURL: "https://esm.ubuntu.com",
-                       },
-               },
-       })
-
-       // If we try to acquire a resource token for a resource
-       // we're not entitled to, we get an appropriate not-found error.
-       _, err = client.GetResourceMachineAccess(ctx, &params.GetResourceMachineAccessRequest{
-               Resource: "other",
-               Machine:  "somemachine",
-       })
-       c.Assert(errgo.Cause(err), qt.Equals, params.ErrResourceForbidden)
-
-       // If we use a client without the token, we get an unauthorized error.
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL: u,
-       })
-       c.Assert(err, qt.Equals, nil)
-       _, err = client.GetResourceMachineAccess(ctx, &params.GetResourceMachineAccessRequest{
-               Resource: "esm",
-               Machine:  "somemachine",
-       })
-       c.Assert(errgo.Cause(err), qt.Equals, params.ErrUnauthorized)
-}
-
-func TestGetResourceInfo(t *testing.T) {
-       c := qt.New(t)
-       defer c.Done()
-
-       srvStore := memstore.New()
-       u := newServer(c, srvStore)
-       ctx := context.Background()
-
-       _, token := getContractToken(ctx, c, u)
-       // Use a client that authorizes with the newly acquired contract token
-       // to acquire a machine token.
-       client, err := contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(token),
-       })
-       c.Assert(err, qt.Equals, nil)
-       resp1, err := client.AddContractMachine(ctx, &params.AddContractMachineRequest{
-               Body: params.AddContractMachineBody{
-                       Architecture: "amd64",
-                       MachineId:    "somemachine",
-                       Os: params.OS{
-                               Distribution: "ubuntu",
-                               Kernel:       "0.01",
-                               Release:      "aRelease",
-                               Series:       "someSeries",
-                               Type:         "osType",
-                       },
-               },
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(resp1.MachineToken),
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       resp, err := client.GetResourceMachineAccess(ctx, &params.GetResourceMachineAccessRequest{
-               Resource: "esm",
-               Machine:  "somemachine",
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BasicAuthorizer("admin", "testpassword"),
-       })
-       c.Assert(err, qt.Equals, nil)
-       resp2, err := client.GetResourceTokenInfo(ctx, &params.GetResourceTokenInfoRequest{
-               Token:    resp.ResourceToken,
-               Resource: "esm",
-       })
-       c.Assert(err, qt.Equals, nil)
-       c.Assert(resp2.MachineId, qt.Equals, "somemachine")
-       c.Assert(resp2.ContractId, qt.Equals, "c0")
-       c.Assert(resp2.Affordances, qt.DeepEquals, map[string]interface{}{"series": []interface{}{"precise", "trusty"}})
-}
-
-func TestGetResourceInfoRevokedMachine(t *testing.T) {
-       c := qt.New(t)
-       defer c.Done()
-
-       srvStore := memstore.New()
-       u := newServer(c, srvStore)
-       ctx := context.Background()
-
-       cid, token := getContractToken(ctx, c, u)
-       // Use a client that authorizes with the newly acquired contract token
-       // to acquire a machine token.
-       client, err := contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(token),
-       })
-       c.Assert(err, qt.Equals, nil)
-       resp1, err := client.AddContractMachine(ctx, &params.AddContractMachineRequest{
-               Body: params.AddContractMachineBody{
-                       Architecture: "amd64",
-                       MachineId:    "somemachine",
-                       Os: params.OS{
-                               Distribution: "ubuntu",
-                               Kernel:       "0.01",
-                               Release:      "aRelease",
-                               Series:       "someSeries",
-                               Type:         "osType",
-                       },
-               },
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BearerAuthorizer(resp1.MachineToken),
-       })
-       c.Assert(err, qt.Equals, nil)
-
-       resp, err := client.GetResourceMachineAccess(ctx, &params.GetResourceMachineAccessRequest{
-               Resource: "esm",
-               Machine:  "somemachine",
-       })
-       c.Assert(err, qt.Equals, nil)
-       _, err = client.RevokeContractMachine(ctx, &params.RevokeContractMachineRequest{
-               Contract: cid,
-               Machine:  "somemachine",
-       })
-       c.Assert(err, qt.Equals, nil)
-       client, err = contractclient.New(contractclient.NewParams{
-               BaseURL:    u,
-               Authorizer: contractclient.BasicAuthorizer("admin", "testpassword"),
-       })
-       c.Assert(err, qt.Equals, nil)
-       _, err = client.GetResourceTokenInfo(ctx, &params.GetResourceTokenInfoRequest{
-               Token:    resp.ResourceToken,
-               Resource: "esm",
-       })
-       c.Assert(err, qt.ErrorMatches, `Get http://.*/v1/resources/esm\?token=`+resp.ResourceToken+`: machine "somemachine" no longer attached to contract "c0"`)
-       c.Assert(errgo.Cause(err), qt.Equals, params.ErrForbidden)
-}
-
 func TestGetResourceInfoUnknownToken(t *testing.T) {
        c := qt.New(t)
        defer c.Done()
